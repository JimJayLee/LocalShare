name: Build for Platforms

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'

jobs:
  # Windows 构建
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Update package version
      run: |
        if ($env:GITHUB_REF_TYPE -eq "tag") {
          $VERSION = $env:GITHUB_REF_NAME -replace '^v', ''
          npm version $VERSION --no-git-tag-version
        }
      shell: powershell

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build for Windows
      run: npm run electron:build -- --win
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-windows
        path: |
          release/*.exe
          release/*.zip
          release/*.deb
          release/*.rpm
          release/*.AppImage
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  # macOS 构建
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Update package version
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
          VERSION=$(echo "$GITHUB_REF_NAME" | sed 's/^v//')
          npm version $VERSION --no-git-tag-version
        fi
      shell: bash

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build for macOS
      run: npm run electron:build -- --mac
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-macos
        path: |
          release/*.dmg
          release/*.zip
          release/*.deb
          release/*.rpm
          release/*.AppImage
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  # Linux 构建
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Update package version
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
          VERSION=$(echo "$GITHUB_REF_NAME" | sed 's/^v//')
          npm version $VERSION --no-git-tag-version
        fi
      shell: bash

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build for Linux
      run: npm run electron:build -- --linux
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-linux
        path: |
          release/*.AppImage
          release/*.deb
          release/*.rpm
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

 