name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      platforms:
        description: 'Platforms to build'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - macos
        - linux

permissions:
  contents: write
  actions: read

jobs:
  build-windows:
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'windows' }}
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build for Windows
      run: npm run electron:build -- --win
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-windows
        path: |
          release/*.exe
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  build-macos:
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'macos' }}
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build for macOS
      run: npm run electron:build -- --mac
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-macos
        path: |
          release/*.dmg
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  build-linux:
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'linux' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build for Linux
      run: npm run electron:build -- --linux
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-linux
        path: |
          release/*.AppImage
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: always() && (needs.build-windows.result == 'success' || needs.build-macos.result == 'success' || needs.build-linux.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        files: |
          artifacts/**/*.dmg
          artifacts/**/*.exe
          artifacts/**/*.AppImage
          artifacts/**/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## ðŸš€ LocalShare Release ${{ github.event.inputs.version }}
          
          ### ðŸ“¦ Downloads
          - **Windows**: `.exe` installer
          - **macOS**: `.dmg` disk image
          - **Linux**: `.AppImage` portable app
          
          ### ðŸ”§ Installation
          1. Download the appropriate file for your platform
          2. Run the installer or mount the disk image
          3. Follow the installation instructions
          
          ### ðŸ“‹ Changes
          See the commit history for detailed changes.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 